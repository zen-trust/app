/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos, and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 - 2022 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';
  import type * as c from 'zapatos/custom';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 104 }


  /* === schema: auth === */

  export namespace auth {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    export namespace authenticator {
      export type Table = 'auth.authenticator';
      export interface Selectable {
        id: number;
        name: string;
        user_id: db.Int8String;
        external_identifier: string;
        public_key: Buffer;
        counter: db.Int8String;
        device_type: string;
        backed_up: boolean;
        transports: string[];
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: number;
        name: string;
        user_id: number;
        external_identifier: string;
        public_key: db.ByteArrayString;
        counter: number;
        device_type: string;
        backed_up: boolean;
        transports: string[];
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        external_identifier?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        public_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
        counter?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        device_type?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        backed_up?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        transports?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        name: string | db.Parameter<string> | db.SQLFragment;
        user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        external_identifier: string | db.Parameter<string> | db.SQLFragment;
        public_key: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
        counter: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        device_type: string | db.Parameter<string> | db.SQLFragment;
        backed_up?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        transports?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        external_identifier?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        public_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
        counter?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        device_type?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        backed_up?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        transports?: string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.DefaultType | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'authenticator_external_identifier_key' | 'authenticator_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace group {
      export type Table = 'auth.group';
      export interface Selectable {
        id: string;
        name: string;
        description: string;
        created_by_user_id: db.Int8String | null;
        tags: string[] | null;
        created_at: Date;
        updated_at: Date;
        search_vector: c.PgTsvector | null;
      }
      export interface JSONSelectable {
        id: string;
        name: string;
        description: string;
        created_by_user_id: number | null;
        tags: string[] | null;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
        search_vector: c.PgTsvector | null;
      }
      export interface Whereable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        created_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        tags?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        search_vector?: c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id: string | db.Parameter<string> | db.SQLFragment;
        name: string | db.Parameter<string> | db.SQLFragment;
        description: string | db.Parameter<string> | db.SQLFragment;
        created_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
        tags?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        description?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        created_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
        tags?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'group_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace group_group {
      export type Table = 'auth.group_group';
      export interface Selectable {
        group_id: string;
        member_group_id: string;
      }
      export interface JSONSelectable {
        group_id: string;
        member_group_id: string;
      }
      export interface Whereable {
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        member_group_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        group_id: string | db.Parameter<string> | db.SQLFragment;
        member_group_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        member_group_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'group_group_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace group_user {
      export type Table = 'auth.group_user';
      export interface Selectable {
        group_id: string;
        user_id: db.Int8String;
      }
      export interface JSONSelectable {
        group_id: string;
        user_id: number;
      }
      export interface Whereable {
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        group_id: string | db.Parameter<string> | db.SQLFragment;
        user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      }
      export interface Updatable {
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      }
      export type UniqueIndex = 'group_user_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace invitation {
      export type Table = 'auth.invitation';
      export interface Selectable {
        id: string;
        email: string;
        token: string;
        created_by_user_id: db.Int8String;
        used_by_user_id: db.Int8String | null;
        created_at: Date;
        updated_at: Date;
        expires_at: Date;
        used_at: Date | null;
      }
      export interface JSONSelectable {
        id: string;
        email: string;
        token: string;
        created_by_user_id: number;
        used_by_user_id: number | null;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
        expires_at: db.TimestampTzString;
        used_at: db.TimestampTzString | null;
      }
      export interface Whereable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        token?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        created_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        used_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        used_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id: string | db.Parameter<string> | db.SQLFragment;
        email: string | db.Parameter<string> | db.SQLFragment;
        token: string | db.Parameter<string> | db.SQLFragment;
        created_by_user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        used_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        used_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        token?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        created_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        used_by_user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        used_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'invitation_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace invitation_group {
      export type Table = 'auth.invitation_group';
      export interface Selectable {
        invitation_id: string;
        group_id: string;
      }
      export interface JSONSelectable {
        invitation_id: string;
        group_id: string;
      }
      export interface Whereable {
        invitation_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        invitation_id: string | db.Parameter<string> | db.SQLFragment;
        group_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        invitation_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        group_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'invitation_group_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace user {
      export type Table = 'auth.user';
      export interface Selectable {
        id: number;
        name: string;
        email: string;
        created_at: Date;
        updated_at: Date;
        email_verified_at: Date | null;
        tags: string[] | null;
        search_vector: c.PgTsvector | null;
      }
      export interface JSONSelectable {
        id: number;
        name: string;
        email: string;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
        email_verified_at: db.TimestampTzString | null;
        tags: string[] | null;
        search_vector: c.PgTsvector | null;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        email?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        tags?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
        search_vector?: c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, c.PgTsvector | db.Parameter<c.PgTsvector> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        name: string | db.Parameter<string> | db.SQLFragment;
        email: string | db.Parameter<string> | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment;
        tags?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        email?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        email_verified_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | null | db.DefaultType | db.SQLFragment>;
        tags?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'users_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = authenticator.Table | group.Table | group_group.Table | group_user.Table | invitation.Table | invitation_group.Table | user.Table;
    export type Selectable = authenticator.Selectable | group.Selectable | group_group.Selectable | group_user.Selectable | invitation.Selectable | invitation_group.Selectable | user.Selectable;
    export type JSONSelectable = authenticator.JSONSelectable | group.JSONSelectable | group_group.JSONSelectable | group_user.JSONSelectable | invitation.JSONSelectable | invitation_group.JSONSelectable | user.JSONSelectable;
    export type Whereable = authenticator.Whereable | group.Whereable | group_group.Whereable | group_user.Whereable | invitation.Whereable | invitation_group.Whereable | user.Whereable;
    export type Insertable = authenticator.Insertable | group.Insertable | group_group.Insertable | group_user.Insertable | invitation.Insertable | invitation_group.Insertable | user.Insertable;
    export type Updatable = authenticator.Updatable | group.Updatable | group_group.Updatable | group_user.Updatable | invitation.Updatable | invitation_group.Updatable | user.Updatable;
    export type UniqueIndex = authenticator.UniqueIndex | group.UniqueIndex | group_group.UniqueIndex | group_user.UniqueIndex | invitation.UniqueIndex | invitation_group.UniqueIndex | user.UniqueIndex;
    export type Column = authenticator.Column | group.Column | group_group.Column | group_user.Column | invitation.Column | invitation_group.Column | user.Column;
  
    export type AllBaseTables = [authenticator.Table, group.Table, group_group.Table, group_user.Table, invitation.Table, invitation_group.Table, user.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [authenticator.Table, group.Table, group_group.Table, group_user.Table, invitation.Table, invitation_group.Table, user.Table];
  }


  /* === schema: oauth === */

  export namespace oauth {
  
    /* --- enums --- */
    /* (none) */
  
    /* --- tables --- */
  
    export namespace access_token {
      export type Table = 'oauth.access_token';
      export interface Selectable {
        id: number;
        client_id: string;
        user_id: db.Int8String | null;
        expires_at: Date;
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: number;
        client_id: string;
        user_id: number | null;
        expires_at: db.TimestampTzString;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        client_id: string | db.Parameter<string> | db.SQLFragment;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
        expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'access_token_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace access_token_scope {
      export type Table = 'oauth.access_token_scope';
      export interface Selectable {
        access_token_id: db.Int8String;
        scope_id: string;
      }
      export interface JSONSelectable {
        access_token_id: number;
        scope_id: string;
      }
      export interface Whereable {
        access_token_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        access_token_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        scope_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        access_token_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'access_token_scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace approval {
      export type Table = 'oauth.approval';
      export interface Selectable {
        id: number;
        user_id: db.Int8String;
        client_id: string;
        expires_at: Date;
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: number;
        user_id: number;
        client_id: string;
        expires_at: db.TimestampTzString;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        client_id: string | db.Parameter<string> | db.SQLFragment;
        expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'approval_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace approval_scope {
      export type Table = 'oauth.approval_scope';
      export interface Selectable {
        approval_id: db.Int8String;
        scope_id: string;
      }
      export interface JSONSelectable {
        approval_id: number;
        scope_id: string;
      }
      export interface Whereable {
        approval_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        approval_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        scope_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        approval_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'approval_scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace authorization_code {
      export type Table = 'oauth.authorization_code';
      export interface Selectable {
        id: number;
        client_id: string;
        user_id: db.Int8String;
        expires_at: Date;
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: number;
        client_id: string;
        user_id: number;
        expires_at: db.TimestampTzString;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        client_id: string | db.Parameter<string> | db.SQLFragment;
        user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'authorization_code_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace authorization_code_scope {
      export type Table = 'oauth.authorization_code_scope';
      export interface Selectable {
        authorization_code_id: db.Int8String;
        scope_id: string;
      }
      export interface JSONSelectable {
        authorization_code_id: number;
        scope_id: string;
      }
      export interface Whereable {
        authorization_code_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        authorization_code_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        scope_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        authorization_code_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'authorization_code_scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace client {
      export type Table = 'oauth.client';
      export interface Selectable {
        id: string;
        name: string;
        redirect_uris: string[] | null;
        secret: string | null;
        user_id: db.Int8String | null;
        skip_authorization: boolean;
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: string;
        name: string;
        redirect_uris: string[] | null;
        secret: string | null;
        user_id: number | null;
        skip_authorization: boolean;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        redirect_uris?: string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string[] | db.Parameter<string[]> | db.SQLFragment | db.ParentColumn>;
        secret?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        skip_authorization?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id: string | db.Parameter<string> | db.SQLFragment;
        name: string | db.Parameter<string> | db.SQLFragment;
        redirect_uris?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment;
        secret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
        skip_authorization?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        redirect_uris?: string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string[] | db.Parameter<string[]> | null | db.DefaultType | db.SQLFragment>;
        secret?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
        skip_authorization?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'client_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace client_scope {
      export type Table = 'oauth.client_scope';
      export interface Selectable {
        client_id: string;
        scope_id: string;
      }
      export interface JSONSelectable {
        client_id: string;
        scope_id: string;
      }
      export interface Whereable {
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        client_id: string | db.Parameter<string> | db.SQLFragment;
        scope_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'client_scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace refresh_token {
      export type Table = 'oauth.refresh_token';
      export interface Selectable {
        id: number;
        client_id: string;
        user_id: db.Int8String | null;
        expires_at: Date;
        created_at: Date;
        updated_at: Date;
      }
      export interface JSONSelectable {
        id: number;
        client_id: string;
        user_id: number | null;
        expires_at: db.TimestampTzString;
        created_at: db.TimestampTzString;
        updated_at: db.TimestampTzString;
      }
      export interface Whereable {
        id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
        client_id: string | db.Parameter<string> | db.SQLFragment;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment;
        expires_at: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      }
      export interface Updatable {
        id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
        client_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | null | db.DefaultType | db.SQLFragment>;
        expires_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
        created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
        updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      }
      export type UniqueIndex = 'refresh_token_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace refresh_token_scope {
      export type Table = 'oauth.refresh_token_scope';
      export interface Selectable {
        refresh_token_id: db.Int8String;
        scope_id: string;
      }
      export interface JSONSelectable {
        refresh_token_id: number;
        scope_id: string;
      }
      export interface Whereable {
        refresh_token_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        refresh_token_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
        scope_id: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        refresh_token_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
        scope_id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'refresh_token_scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    export namespace scope {
      export type Table = 'oauth.scope';
      export interface Selectable {
        id: string;
        name: string;
      }
      export interface JSONSelectable {
        id: string;
        name: string;
      }
      export interface Whereable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      }
      export interface Insertable {
        id: string | db.Parameter<string> | db.SQLFragment;
        name: string | db.Parameter<string> | db.SQLFragment;
      }
      export interface Updatable {
        id?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
        name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      }
      export type UniqueIndex = 'scope_pkey';
      export type Column = keyof Selectable;
      export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
      export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
      export type SQL = SQLExpression | SQLExpression[];
    }
  
    /* --- aggregate types --- */
  
    export type Table = access_token.Table | access_token_scope.Table | approval.Table | approval_scope.Table | authorization_code.Table | authorization_code_scope.Table | client.Table | client_scope.Table | refresh_token.Table | refresh_token_scope.Table | scope.Table;
    export type Selectable = access_token.Selectable | access_token_scope.Selectable | approval.Selectable | approval_scope.Selectable | authorization_code.Selectable | authorization_code_scope.Selectable | client.Selectable | client_scope.Selectable | refresh_token.Selectable | refresh_token_scope.Selectable | scope.Selectable;
    export type JSONSelectable = access_token.JSONSelectable | access_token_scope.JSONSelectable | approval.JSONSelectable | approval_scope.JSONSelectable | authorization_code.JSONSelectable | authorization_code_scope.JSONSelectable | client.JSONSelectable | client_scope.JSONSelectable | refresh_token.JSONSelectable | refresh_token_scope.JSONSelectable | scope.JSONSelectable;
    export type Whereable = access_token.Whereable | access_token_scope.Whereable | approval.Whereable | approval_scope.Whereable | authorization_code.Whereable | authorization_code_scope.Whereable | client.Whereable | client_scope.Whereable | refresh_token.Whereable | refresh_token_scope.Whereable | scope.Whereable;
    export type Insertable = access_token.Insertable | access_token_scope.Insertable | approval.Insertable | approval_scope.Insertable | authorization_code.Insertable | authorization_code_scope.Insertable | client.Insertable | client_scope.Insertable | refresh_token.Insertable | refresh_token_scope.Insertable | scope.Insertable;
    export type Updatable = access_token.Updatable | access_token_scope.Updatable | approval.Updatable | approval_scope.Updatable | authorization_code.Updatable | authorization_code_scope.Updatable | client.Updatable | client_scope.Updatable | refresh_token.Updatable | refresh_token_scope.Updatable | scope.Updatable;
    export type UniqueIndex = access_token.UniqueIndex | access_token_scope.UniqueIndex | approval.UniqueIndex | approval_scope.UniqueIndex | authorization_code.UniqueIndex | authorization_code_scope.UniqueIndex | client.UniqueIndex | client_scope.UniqueIndex | refresh_token.UniqueIndex | refresh_token_scope.UniqueIndex | scope.UniqueIndex;
    export type Column = access_token.Column | access_token_scope.Column | approval.Column | approval_scope.Column | authorization_code.Column | authorization_code_scope.Column | client.Column | client_scope.Column | refresh_token.Column | refresh_token_scope.Column | scope.Column;
  
    export type AllBaseTables = [access_token.Table, access_token_scope.Table, approval.Table, approval_scope.Table, authorization_code.Table, authorization_code_scope.Table, client.Table, client_scope.Table, refresh_token.Table, refresh_token_scope.Table, scope.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [access_token.Table, access_token_scope.Table, approval.Table, approval_scope.Table, authorization_code.Table, authorization_code_scope.Table, client.Table, client_scope.Table, refresh_token.Table, refresh_token_scope.Table, scope.Table];
  }


  /* === schema: public === */

  /* --- enums --- */
  /* (none) */

  /* --- tables --- */

  export namespace ca {
    export type Table = 'ca';
    export interface Selectable {
      id: number;
      subject: string;
      description: string | null;
      certificate: Buffer;
      encrypted_private_key: Buffer;
      serial_number: db.Int8String;
      created_at: Date;
      updated_at: Date;
      valid_from: Date;
      valid_until: Date;
      is_revoked: boolean;
      active: boolean;
      tags: db.JSONValue | null;
      root_ca_id: number;
      user_id: db.Int8String;
    }
    export interface JSONSelectable {
      id: number;
      subject: string;
      description: string | null;
      certificate: db.ByteArrayString;
      encrypted_private_key: db.ByteArrayString;
      serial_number: number;
      created_at: db.TimestampTzString;
      updated_at: db.TimestampTzString;
      valid_from: db.TimestampTzString;
      valid_until: db.TimestampTzString;
      is_revoked: boolean;
      active: boolean;
      tags: db.JSONValue | null;
      root_ca_id: number;
      user_id: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      certificate?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      encrypted_private_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      valid_from?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      valid_until?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      is_revoked?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      root_ca_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      subject: string | db.Parameter<string> | db.SQLFragment;
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      certificate: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      encrypted_private_key: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      serial_number: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      valid_from: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      valid_until: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      is_revoked?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      root_ca_id: number | db.Parameter<number> | db.SQLFragment;
      user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      certificate?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      encrypted_private_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      valid_from?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      valid_until?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      is_revoked?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      root_ca_id?: number | db.Parameter<number> | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'ca_pkey' | 'ca_serial_number_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace certificate {
    export type Table = 'certificate';
    export interface Selectable {
      id: number;
      subject: string;
      name: string;
      serial_number: db.Int8String;
      description: string | null;
      created_at: Date;
      updated_at: Date;
      tags: db.JSONValue | null;
      ca_id: number | null;
      user_id: db.Int8String;
    }
    export interface JSONSelectable {
      id: number;
      subject: string;
      name: string;
      serial_number: number;
      description: string | null;
      created_at: db.TimestampTzString;
      updated_at: db.TimestampTzString;
      tags: db.JSONValue | null;
      ca_id: number | null;
      user_id: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      description?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      ca_id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      subject: string | db.Parameter<string> | db.SQLFragment;
      name: string | db.Parameter<string> | db.SQLFragment;
      serial_number: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      ca_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment;
      user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      name?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      description?: string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | null | db.DefaultType | db.SQLFragment>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      ca_id?: number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | null | db.DefaultType | db.SQLFragment>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'certificates_pkey' | 'certificates_serial_number_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  export namespace root_ca {
    export type Table = 'root_ca';
    export interface Selectable {
      id: number;
      subject: string;
      certificate: Buffer;
      encrypted_private_key: Buffer;
      serial_number: db.Int8String;
      created_at: Date;
      updated_at: Date;
      valid_until: Date;
      is_revoked: boolean;
      active: boolean;
      valid_from: Date;
      tags: db.JSONValue | null;
      user_id: db.Int8String;
    }
    export interface JSONSelectable {
      id: number;
      subject: string;
      certificate: db.ByteArrayString;
      encrypted_private_key: db.ByteArrayString;
      serial_number: number;
      created_at: db.TimestampTzString;
      updated_at: db.TimestampTzString;
      valid_until: db.TimestampTzString;
      is_revoked: boolean;
      active: boolean;
      valid_from: db.TimestampTzString;
      tags: db.JSONValue | null;
      user_id: number;
    }
    export interface Whereable {
      id?: number | db.Parameter<number> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, number | db.Parameter<number> | db.SQLFragment | db.ParentColumn>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
      certificate?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      encrypted_private_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.ParentColumn>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      valid_until?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      is_revoked?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      active?: boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.SQLFragment | db.ParentColumn>;
      valid_from?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.ParentColumn>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | db.SQLFragment | db.ParentColumn>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment;
      subject: string | db.Parameter<string> | db.SQLFragment;
      certificate: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      encrypted_private_key: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment;
      serial_number: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      valid_until: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment;
      is_revoked?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment;
      valid_from?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment;
      user_id: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment;
    }
    export interface Updatable {
      id?: number | db.Parameter<number> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, number | db.Parameter<number> | db.DefaultType | db.SQLFragment>;
      subject?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
      certificate?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      encrypted_private_key?: (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment | db.SQLFragment<any, (db.ByteArrayString | Buffer) | db.Parameter<(db.ByteArrayString | Buffer)> | db.SQLFragment>;
      serial_number?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
      created_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      updated_at?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      valid_until?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.SQLFragment>;
      is_revoked?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      active?: boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, boolean | db.Parameter<boolean> | db.DefaultType | db.SQLFragment>;
      valid_from?: (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment | db.SQLFragment<any, (db.TimestampTzString | Date) | db.Parameter<(db.TimestampTzString | Date)> | db.DefaultType | db.SQLFragment>;
      tags?: db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment | db.SQLFragment<any, db.JSONValue | db.Parameter<db.JSONValue> | null | db.DefaultType | db.SQLFragment>;
      user_id?: (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment | db.SQLFragment<any, (number | db.Int8String) | db.Parameter<(number | db.Int8String)> | db.SQLFragment>;
    }
    export type UniqueIndex = 'root_ca_pkey' | 'root_ca_serial_number_key';
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = Table | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Whereable | Column | db.ParentColumn | db.GenericSQLExpression;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* --- aggregate types --- */

  export namespace public {  
    export type Table = ca.Table | certificate.Table | root_ca.Table;
    export type Selectable = ca.Selectable | certificate.Selectable | root_ca.Selectable;
    export type JSONSelectable = ca.JSONSelectable | certificate.JSONSelectable | root_ca.JSONSelectable;
    export type Whereable = ca.Whereable | certificate.Whereable | root_ca.Whereable;
    export type Insertable = ca.Insertable | certificate.Insertable | root_ca.Insertable;
    export type Updatable = ca.Updatable | certificate.Updatable | root_ca.Updatable;
    export type UniqueIndex = ca.UniqueIndex | certificate.UniqueIndex | root_ca.UniqueIndex;
    export type Column = ca.Column | certificate.Column | root_ca.Column;
  
    export type AllBaseTables = [ca.Table, certificate.Table, root_ca.Table];
    export type AllForeignTables = [];
    export type AllViews = [];
    export type AllMaterializedViews = [];
    export type AllTablesAndViews = [ca.Table, certificate.Table, root_ca.Table];
  }



  /* === global aggregate types === */

  export type Schema = 'auth' | 'oauth' | 'public';
  export type Table = auth.Table | oauth.Table | public.Table;
  export type Selectable = auth.Selectable | oauth.Selectable | public.Selectable;
  export type JSONSelectable = auth.JSONSelectable | oauth.JSONSelectable | public.JSONSelectable;
  export type Whereable = auth.Whereable | oauth.Whereable | public.Whereable;
  export type Insertable = auth.Insertable | oauth.Insertable | public.Insertable;
  export type Updatable = auth.Updatable | oauth.Updatable | public.Updatable;
  export type UniqueIndex = auth.UniqueIndex | oauth.UniqueIndex | public.UniqueIndex;
  export type Column = auth.Column | oauth.Column | public.Column;

  export type AllSchemas = ['auth', 'oauth', 'public'];
  export type AllBaseTables = [...auth.AllBaseTables, ...oauth.AllBaseTables, ...public.AllBaseTables];
  export type AllForeignTables = [...auth.AllForeignTables, ...oauth.AllForeignTables, ...public.AllForeignTables];
  export type AllViews = [...auth.AllViews, ...oauth.AllViews, ...public.AllViews];
  export type AllMaterializedViews = [...auth.AllMaterializedViews, ...oauth.AllMaterializedViews, ...public.AllMaterializedViews];
  export type AllTablesAndViews = [...auth.AllTablesAndViews, ...oauth.AllTablesAndViews, ...public.AllTablesAndViews];


  /* === lookups === */

  export type SelectableForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.Selectable;
    "auth.group": auth.group.Selectable;
    "auth.group_group": auth.group_group.Selectable;
    "auth.group_user": auth.group_user.Selectable;
    "auth.invitation": auth.invitation.Selectable;
    "auth.invitation_group": auth.invitation_group.Selectable;
    "auth.user": auth.user.Selectable;
    "oauth.access_token": oauth.access_token.Selectable;
    "oauth.access_token_scope": oauth.access_token_scope.Selectable;
    "oauth.approval": oauth.approval.Selectable;
    "oauth.approval_scope": oauth.approval_scope.Selectable;
    "oauth.authorization_code": oauth.authorization_code.Selectable;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.Selectable;
    "oauth.client": oauth.client.Selectable;
    "oauth.client_scope": oauth.client_scope.Selectable;
    "oauth.refresh_token": oauth.refresh_token.Selectable;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.Selectable;
    "oauth.scope": oauth.scope.Selectable;
    "ca": ca.Selectable;
    "certificate": certificate.Selectable;
    "root_ca": root_ca.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.JSONSelectable;
    "auth.group": auth.group.JSONSelectable;
    "auth.group_group": auth.group_group.JSONSelectable;
    "auth.group_user": auth.group_user.JSONSelectable;
    "auth.invitation": auth.invitation.JSONSelectable;
    "auth.invitation_group": auth.invitation_group.JSONSelectable;
    "auth.user": auth.user.JSONSelectable;
    "oauth.access_token": oauth.access_token.JSONSelectable;
    "oauth.access_token_scope": oauth.access_token_scope.JSONSelectable;
    "oauth.approval": oauth.approval.JSONSelectable;
    "oauth.approval_scope": oauth.approval_scope.JSONSelectable;
    "oauth.authorization_code": oauth.authorization_code.JSONSelectable;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.JSONSelectable;
    "oauth.client": oauth.client.JSONSelectable;
    "oauth.client_scope": oauth.client_scope.JSONSelectable;
    "oauth.refresh_token": oauth.refresh_token.JSONSelectable;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.JSONSelectable;
    "oauth.scope": oauth.scope.JSONSelectable;
    "ca": ca.JSONSelectable;
    "certificate": certificate.JSONSelectable;
    "root_ca": root_ca.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.Whereable;
    "auth.group": auth.group.Whereable;
    "auth.group_group": auth.group_group.Whereable;
    "auth.group_user": auth.group_user.Whereable;
    "auth.invitation": auth.invitation.Whereable;
    "auth.invitation_group": auth.invitation_group.Whereable;
    "auth.user": auth.user.Whereable;
    "oauth.access_token": oauth.access_token.Whereable;
    "oauth.access_token_scope": oauth.access_token_scope.Whereable;
    "oauth.approval": oauth.approval.Whereable;
    "oauth.approval_scope": oauth.approval_scope.Whereable;
    "oauth.authorization_code": oauth.authorization_code.Whereable;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.Whereable;
    "oauth.client": oauth.client.Whereable;
    "oauth.client_scope": oauth.client_scope.Whereable;
    "oauth.refresh_token": oauth.refresh_token.Whereable;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.Whereable;
    "oauth.scope": oauth.scope.Whereable;
    "ca": ca.Whereable;
    "certificate": certificate.Whereable;
    "root_ca": root_ca.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.Insertable;
    "auth.group": auth.group.Insertable;
    "auth.group_group": auth.group_group.Insertable;
    "auth.group_user": auth.group_user.Insertable;
    "auth.invitation": auth.invitation.Insertable;
    "auth.invitation_group": auth.invitation_group.Insertable;
    "auth.user": auth.user.Insertable;
    "oauth.access_token": oauth.access_token.Insertable;
    "oauth.access_token_scope": oauth.access_token_scope.Insertable;
    "oauth.approval": oauth.approval.Insertable;
    "oauth.approval_scope": oauth.approval_scope.Insertable;
    "oauth.authorization_code": oauth.authorization_code.Insertable;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.Insertable;
    "oauth.client": oauth.client.Insertable;
    "oauth.client_scope": oauth.client_scope.Insertable;
    "oauth.refresh_token": oauth.refresh_token.Insertable;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.Insertable;
    "oauth.scope": oauth.scope.Insertable;
    "ca": ca.Insertable;
    "certificate": certificate.Insertable;
    "root_ca": root_ca.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.Updatable;
    "auth.group": auth.group.Updatable;
    "auth.group_group": auth.group_group.Updatable;
    "auth.group_user": auth.group_user.Updatable;
    "auth.invitation": auth.invitation.Updatable;
    "auth.invitation_group": auth.invitation_group.Updatable;
    "auth.user": auth.user.Updatable;
    "oauth.access_token": oauth.access_token.Updatable;
    "oauth.access_token_scope": oauth.access_token_scope.Updatable;
    "oauth.approval": oauth.approval.Updatable;
    "oauth.approval_scope": oauth.approval_scope.Updatable;
    "oauth.authorization_code": oauth.authorization_code.Updatable;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.Updatable;
    "oauth.client": oauth.client.Updatable;
    "oauth.client_scope": oauth.client_scope.Updatable;
    "oauth.refresh_token": oauth.refresh_token.Updatable;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.Updatable;
    "oauth.scope": oauth.scope.Updatable;
    "ca": ca.Updatable;
    "certificate": certificate.Updatable;
    "root_ca": root_ca.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.UniqueIndex;
    "auth.group": auth.group.UniqueIndex;
    "auth.group_group": auth.group_group.UniqueIndex;
    "auth.group_user": auth.group_user.UniqueIndex;
    "auth.invitation": auth.invitation.UniqueIndex;
    "auth.invitation_group": auth.invitation_group.UniqueIndex;
    "auth.user": auth.user.UniqueIndex;
    "oauth.access_token": oauth.access_token.UniqueIndex;
    "oauth.access_token_scope": oauth.access_token_scope.UniqueIndex;
    "oauth.approval": oauth.approval.UniqueIndex;
    "oauth.approval_scope": oauth.approval_scope.UniqueIndex;
    "oauth.authorization_code": oauth.authorization_code.UniqueIndex;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.UniqueIndex;
    "oauth.client": oauth.client.UniqueIndex;
    "oauth.client_scope": oauth.client_scope.UniqueIndex;
    "oauth.refresh_token": oauth.refresh_token.UniqueIndex;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.UniqueIndex;
    "oauth.scope": oauth.scope.UniqueIndex;
    "ca": ca.UniqueIndex;
    "certificate": certificate.UniqueIndex;
    "root_ca": root_ca.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.Column;
    "auth.group": auth.group.Column;
    "auth.group_group": auth.group_group.Column;
    "auth.group_user": auth.group_user.Column;
    "auth.invitation": auth.invitation.Column;
    "auth.invitation_group": auth.invitation_group.Column;
    "auth.user": auth.user.Column;
    "oauth.access_token": oauth.access_token.Column;
    "oauth.access_token_scope": oauth.access_token_scope.Column;
    "oauth.approval": oauth.approval.Column;
    "oauth.approval_scope": oauth.approval_scope.Column;
    "oauth.authorization_code": oauth.authorization_code.Column;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.Column;
    "oauth.client": oauth.client.Column;
    "oauth.client_scope": oauth.client_scope.Column;
    "oauth.refresh_token": oauth.refresh_token.Column;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.Column;
    "oauth.scope": oauth.scope.Column;
    "ca": ca.Column;
    "certificate": certificate.Column;
    "root_ca": root_ca.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    "auth.authenticator": auth.authenticator.SQL;
    "auth.group": auth.group.SQL;
    "auth.group_group": auth.group_group.SQL;
    "auth.group_user": auth.group_user.SQL;
    "auth.invitation": auth.invitation.SQL;
    "auth.invitation_group": auth.invitation_group.SQL;
    "auth.user": auth.user.SQL;
    "oauth.access_token": oauth.access_token.SQL;
    "oauth.access_token_scope": oauth.access_token_scope.SQL;
    "oauth.approval": oauth.approval.SQL;
    "oauth.approval_scope": oauth.approval_scope.SQL;
    "oauth.authorization_code": oauth.authorization_code.SQL;
    "oauth.authorization_code_scope": oauth.authorization_code_scope.SQL;
    "oauth.client": oauth.client.SQL;
    "oauth.client_scope": oauth.client_scope.SQL;
    "oauth.refresh_token": oauth.refresh_token.SQL;
    "oauth.refresh_token_scope": oauth.refresh_token_scope.SQL;
    "oauth.scope": oauth.scope.SQL;
    "ca": ca.SQL;
    "certificate": certificate.SQL;
    "root_ca": root_ca.SQL;
  }[T];

}
